---
import { indexSchemaMarkup } from "@/lib/schemaMarkup";
import Layout from "@/layouts/Layout.astro";
import ServiceSection from "@/components/astro/Section/ServiceSection/ServiceSection.astro";
import ProcessSection from "@/components/astro/Section/ProcessSection/ProcessSection.astro";
import PriceSection from "@/components/astro/Section/PriceSection/PriceSection.astro";
import LandingSection from "@/components/astro/Section/LandingSection/LandingSection.astro";
import HeaderSection from "@/components/astro/Section/HeaderSection/HeaderSection.astro";
import MissionSection from "@/components/astro/Section/MissionSection/MissionSection.astro";
import FAQSection from "@/components/astro/Section/FAQSection/FAQSection.astro";
import CTASection from "@/components/astro/Section/CTASection/CTASection.astro";
import FooterSection from "@/components/astro/Section/FooterSection/FooterSection.astro";
import FloatingNavBar from "@/components/astro/Section/FloatingNavBar/FloatingNavBar.astro";
import LargeAsterisk from "@/components/astro/ui/LargeAsterisk.astro";
import SideNav from "@/components/astro/Section/SideNav/SideNav.astro";
import Menu from "./ui/Menu.astro";
import CreditsCalloutSection from "./Section/CreditsCalloutSection/CreditsCalloutSection.astro";
---

<Layout>
	<slot name="head" slot="head" />
	<!-- cursor group -->
	<div
		id="cursorContainer"
		class="pointer-events-none fixed top-0 z-[999] hidden min-h-full min-w-full">
		<div
			id="faqCursor"
			class="pointer-events-none fixed hidden size-32 origin-center opacity-0 lg:block">
			<LargeAsterisk />
		</div>
	</div>

	<!-- side nav for language and menu on mobile -->
	<SideNav />

	<!-- make above other content so tabbing works better -->
	<FloatingNavBar />

	<button
		id="smallNavButton"
		class="fixed right-6 top-8 z-[200] block size-8 stroke-2 sm:right-12 md:hidden">
		<span class="sr-only">Open side navigation</span>
		<Menu />
	</button>

	<div id="mainScroll" class="max-h-full ~pb-56/96">
		<!-- hero, services and process section -->
		<main id="home" class="relative z-10 bg-background">
			<div
				class="relative mx-auto min-h-screen px-6 sm:px-12 md:px-16 3xl:max-w-[95vw]">
				<HeaderSection />
				<LandingSection />
				<ServiceSection />
				<ProcessSection />
			</div>

			<!-- pricing section -->
			<PriceSection />

			<div class="relative mx-auto px-6 sm:px-12 md:px-16 3xl:max-w-[95vw]">
				<MissionSection />
				<FAQSection />
				<CreditsCalloutSection />
			</div>
			<CTASection />
		</main>

		<div id="bottomContainer" class="fixed bottom-0 right-0 w-full ~h-56/96">
			<div
				class="relative mx-auto h-full px-6 sm:px-12 md:px-16 3xl:max-w-[95vw]">
				<FooterSection />
			</div>
		</div>
	</div>

	<slot />

	<script
		is:inline
		type="application/ld+json"
		set:html={JSON.stringify(indexSchemaMarkup)}
	/>
</Layout>
<style is:global>
	#faqCursor {
		fill-opacity: 0.4;
	}
</style>
<script>
	import Lenis, { type LenisOptions, type ScrollToOptions } from "lenis";
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { cookies } from "@/lib/clientCookies";
	import cursorFollow from "@/lib/cursorFollow";

	gsap.registerPlugin(ScrollTrigger);
	ScrollTrigger.config({ ignoreMobileResize: true });

	// test refresh rate
	// const t = [] as number[];
	// function animate(now: number) {
	// 	t.unshift(now);
	// 	if (t.length > 10) {
	// 		const t0 = t.pop();
	// 		const fps = Math.floor((1000 * 10) / (now - t0!));
	// 		console.log(fps)
	// 	} else window.requestAnimationFrame(animate);
	// }

	// window.requestAnimationFrame(animate);

	const initGlobalLenis = () => {
		const config : LenisOptions = {
			eventsTarget: document.getElementById("mainScroll")!
		}
		if (window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
			config.smoothWheel = false;
		}
		
		window.lenis = new Lenis(config);

		lenis.on("scroll", ScrollTrigger.update);

		gsap.ticker.add((time) => {
			lenis.raf(time * 1000);
		});
	};

	gsap.ticker.lagSmoothing(0);

	declare global {
		var lenis: Lenis;
		var initGlobalLenis: () => void;
	}

	window.initGlobalLenis = initGlobalLenis;

	initGlobalLenis();
	cursorFollow();

	const config: () => ScrollToOptions = () => ({
		offset: -window.innerHeight * 0.2,
		easing: (x: number) =>
			x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,
		duration: window.lenis?.isSmooth ? 1.5 : 1,
	});
	const handleHashNavigate = (href: string) => {
		window.lenis?.scrollTo(href, config());
		window.location.hash = href;
		window.activeIndex = window.href?.indexOf(href.split("#")[1]);
		window.setNavbar?.();
	};

	const smallNavButton = document.getElementById("smallNavButton");
	gsap.to(smallNavButton, {
		scrollTrigger: {
			trigger: document.documentElement,
			start: "top top",
			end: `+=${window.innerHeight * 0.2}`,
			scrub: 1,
		},
		autoAlpha: 0,
	});

	window.onload = () => {
		const urlHash = window.location.href.split("#")[1];
		if (urlHash) handleHashNavigate(`#${urlHash}`);

		const anchorArray = gsap.utils.toArray("a") as HTMLAnchorElement[];
		anchorArray.forEach((anchor) => {
			anchor.addEventListener(
				"click",
				(e) => {
					const lang = anchor.getAttribute("data-lang");
					const href = anchor.getAttribute("href");
					if (lang) {
						e.preventDefault();
						cookies.set("lang", lang);
						window.location.assign(href ?? `/${lang}/`);
						return;
					}

					if (!href || !href.startsWith("#")) return;
					e.preventDefault();
					handleHashNavigate(href);
					window.closeSidenav?.();
				},
				{
					passive: false,
					capture: true,
				},
			);
		});
	};
	// horizontalLoop(document.getElementById("animatedDivider"), {
	// 		repeat: -1,
	// 		speed: 0.35,
	// 	});
</script>
