---
import GlossyCard from "../../ui/GlossyCard.astro";
import ArrowRightShort from "../../ui/ArrowRightShort.astro";
import VeryLongArrowRightDown from "../../ui/VeryLongArrowRightDown.astro";
import BlurryBlob from "../../ui/BlurryBlob.astro";

import * as m from "@/paraglide/messages";
import { cn } from "@/lib/utils";
import Mail from "../../ui/Mail.astro";
import Twitter from "../../ui/Twitter.astro";
import Meta from "../../ui/Meta.astro";
import Instagram from "../../ui/Instagram.astro";

const isBahasa = Astro.locals.paraglide.lang === "id";
const isViet = Astro.locals.paraglide.lang === "vi";
const isTagalog = Astro.locals.paraglide.lang === "tl";

const isHK = Astro.locals.paraglide.lang === "zh-HK";
const isTW = Astro.locals.paraglide.lang === "zh-TW";
const isCN = Astro.locals.paraglide.lang === "zh-CN";
const isZH = Astro.locals.paraglide.lang === "zh";
const isChinese = isHK || isTW || isCN || isZH;

const isSmall = isBahasa || isViet || isTagalog;
---

<section
	aria-describedby="ctaSectionDescription"
	id="getstarted"
	class="relative flex w-full flex-col items-center justify-center overflow-hidden rounded-[20px] bg-primary text-primary-foreground ~py-16/52 md:rounded-[40px] lg:rounded-[60px]">
	<div
		id="ctaSection"
		class={cn(
			"relative grid w-full justify-between gap-[5vw] px-6 sm:px-12 md:px-16 3xl:max-w-[95vw]",
			!isSmall && "ctaSectionBreakSmall",
			isSmall && "ctaSectionBreakLarge",
		)}>
		<p
			class={cn(
				"mutedText relative left-0 col-start-[2] row-start-1 ml-auto",
				!isSmall && "lg:col-start-[1] lg:mx-auto",
				isSmall && "xl:col-start-[1] xl:mx-auto",
			)}>
			/ {m.getstarted2()} /
		</p>
		<div
			class={cn(
				"col-span-2 col-start-1 row-start-1 md:-mt-4",
				!isSmall && "lg:col-span-1 lg:col-start-2 lg:-mt-2",
				isSmall && "xl:col-span-1 xl:col-start-2 xl:-mt-2",
			)}>
			<header
				class={cn(
					"whitespace-nowrap pb-[5vw] ",
					!isSmall &&
						"text-2xl leading-[1] tracking-tight sm:text-3xl md:text-[7vw] md:leading-[1] 3xl:text-[130px]",
					isSmall &&
						"text-2xl leading-[1] tracking-tight sm:text-3xl md:text-[5vw] md:leading-[1] 3xl:text-[130px]",
					isChinese && "leading-[1.4] md:leading-[1.4]",
				)}>
				<h1>
					{m.clean_strong_giraffe_pinch()}
					<br />
					<span class="inline-flex items-start whitespace-nowrap"
						>{m.keen_sharp_rabbit_love()}<span>&nbsp;</span><span
							id="ctaArrow"
							class={cn(
								"aspect-video w-[130px] translate-x-3 translate-y-3 sm:w-[180px] md:w-[30vw] 3xl:w-[700px]",
								!isSmall && "md:translate-y-[3vw] 3xl:translate-y-[2vw]",
								isSmall && "md:translate-y-[2vw]",
								isChinese &&
									"translate-y-5 md:translate-y-[5vw] 3xl:translate-y-[3vw]",
							)}>
							<VeryLongArrowRightDown />
						</span></span
					>
				</h1>
			</header>
			<div
				class="flex flex-col gap-10 ~pt-6/24 md:flex-row md:gap-[5vw] 2xl:pr-[8vw]">
				<div
					class="order-last flex flex-1 flex-col gap-6 md:order-first md:gap-10">
					<p
						id="ctaSectionDescription"
						class={cn(
							"flex flex-col gap-1 text-sm leading-[1.4] text-primary-foreground/70 max-w-[550px] 3xl:max-w-[800px] md:gap-3 md:leading-[1.8] lg:text-base lg:leading-[1.8]",
							!isSmall && "lg:col-start-3",
							isSmall && "xl:col-start-3",
						)}>
						{m.spry_solid_wombat_pick()}
					</p>
					<div class="flex flex-col items-start gap-3">
						<p class="mutedTextDark">{m.spry_real_cow_slide()}</p>
						<ul class="flex items-center gap-3 text-base font-normal">
							<li>
								<a
									class="inline-block size-8 stroke-1 text-primary-foreground/70 transition-colors duration-300 hover:text-primary-foreground"
									href="mailto:samyung@stablestudio.org">
									<span class="sr-only">Email Address</span>
									<Mail />
								</a>
							</li>
							<li>
								<a
									class="inline-block size-8 stroke-1 text-primary-foreground/70 transition-colors duration-300 hover:text-primary-foreground"
									href="https://x.com/stablestudioSS">
									<span class="sr-only">Twitter Link</span>
									<Twitter />
								</a>
							</li>
							<li>
								<a
									class="inline-block size-8 stroke-1 text-primary-foreground/70 transition-colors duration-300 hover:text-primary-foreground"
									href="https://www.facebook.com/profile.php?id=61567128136714">
									<span class="sr-only">Facebook Link</span>
									<Meta />
								</a>
							</li>
							<li>
								<a
									class="inline-block size-8 stroke-1 text-primary-foreground/70 transition-colors duration-300 hover:text-primary-foreground"
									href="https://www.instagram.com/stablestudioss/">
									<span class="sr-only">Instagram Link</span>
									<Instagram />
								</a>
							</li>
							<li
								class={cn(
									"-translate-y-[2px] text-primary-foreground/70 duration-300 transition-colors hover:text-primary-foreground",
								)}>
								<a href="https://sam.partialty.com"
									>{m.spry_direct_stork_devour()}</a
								>
							</li>
						</ul>
					</div>
				</div>
				<form id="contactForm" class="flex flex-1 flex-col gap-8">
					<input
						required
						name="name"
						autocorrect="off"
						autocapitalize="off"
						spellcheck="false"
						autocomplete="name"
						type="text"
						placeholder={m.loud_male_lobster_bask()}
						class={cn(
							"mutedTextInput text-normal h-[50px] border-b border-border/30 bg-transparent text-base font-normal transition-all focus:border-border",
							isChinese && "text-sm placeholder:!text-xs",
						)}
					/>
					<input
						required
						name="email"
						autocorrect="off"
						autocapitalize="off"
						spellcheck="false"
						autocomplete="email"
						type="email"
						placeholder={m.sunny_stout_cougar_tend()}
						class={cn(
							"mutedTextInput text-normal h-[50px] border-b border-border/30 bg-transparent text-base font-normal transition-all focus:border-border",
							isChinese && "text-sm placeholder:!text-xs",
						)}
					/>
					<textarea
						required
						name="enquiry"
						placeholder={m.safe_ago_alligator_soar()}
						class={cn(
							"mutedTextInput text-normal m-0 h-[80px] border-b border-border/30 bg-transparent p-0 text-base font-normal outline-none transition-all focus:border-border",
							isChinese && "text-sm placeholder:!text-xs",
						)}></textarea>

					<div
						aria-live="polite"
						id="formSubmissionStatus"
						class="max-h-[2rem] overflow-hidden">
						<p
							id="formSubmitText"
							class="max-h-full text-xs leading-[1rem] text-muted-foreground">
							{m.super_nice_ant_tap()}
						</p>

						<p
							id="formSubmitTextSuccess"
							class="hidden max-h-full text-xs font-normal leading-[1rem] text-primary-foreground/70">
							{m.level_maroon_lynx_cherish()}
						</p>
						<p
							id="formSubmitTextWarn"
							class="hidden max-h-full text-xs font-normal leading-[1rem] text-primary-foreground/70">
							{m.whole_odd_walrus_relish()}
						</p>
						<p
							id="formSubmitTextError"
							class="hidden max-h-full text-xs font-normal leading-[1rem] text-primary-foreground/70">
							{m.loved_fancy_clownfish_fry()}
						</p>
					</div>

					<button
						data-umami-event="Get Started Bottom"
						aria-controls="formSubmissionStatus"
						class="group self-start overflow-hidden rounded bg-background px-4 py-4 text-primary md:gap-3 md:px-5 md:py-4">
						<span class="flex items-center gap-1">
							<span class="size-4 text-muted-foreground md:size-6"
								><ArrowRightShort /></span
							>

							<span
								class={cn(
									"relative mt-[2px] flex items-center justify-center overflow-hidden text-xs sm:text-sm",
									isChinese && "mt-0 text-sm",
								)}>
								<span
									class="translate-y-0 transition duration-300 group-hover:translate-y-[100%]">
									{m.suave_helpful_lion_evoke()}
								</span>
								<span
									class="absolute -translate-y-[100%] transition duration-300 group-hover:translate-y-0">
									{m.suave_helpful_lion_evoke()}
								</span>
							</span>
						</span>
					</button>
				</form>
			</div>
		</div>
	</div>
	<div
		id="globeContainer"
		class="relative isolate my-36 flex max-h-[800px] min-h-[65vh] w-full rotate-90 items-center justify-center px-28 ~mb-16/52 md:rotate-0 md:px-16 md:~mt-16/52 3xl:max-w-[95vw]">
		<BlurryBlob />
		<GlossyCard />
		<!-- <GlobeLoader client:load /> -->
	</div>
</section>

<style is:global>
	.ctaSectionBreakSmall,
	.ctaSectionBreakLarge {
		grid-template-columns: auto min-content;
	}
	@media screen and (min-width: 64rem) {
		/* lg, 1024px */
		.ctaSectionBreakSmall {
			grid-template-columns: 10vw 1fr;
		}
	}
	@media screen and (min-width: 80rem) {
		/* xl, 1280px */
		.ctaSectionBreakLarge {
			grid-template-columns: 10vw 1fr;
		}
	}
</style>

<style>
	.mutedText {
		@apply whitespace-nowrap text-[0.65rem] font-normal uppercase !leading-7 text-background/70 md:text-xs;
	}
	.mutedTextDark {
		@apply whitespace-nowrap text-[0.65rem] font-normal uppercase !leading-7 text-muted-foreground md:text-sm;
	}
	.mutedTextInput::placeholder {
		@apply whitespace-nowrap text-[0.65rem] font-normal uppercase !leading-7 text-muted-foreground md:text-xs;
	}
</style>

<script>
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	const ctaSection = document.getElementById("ctaSection") as HTMLElement;
	// first path is arrow head, second path is the arrow body
	const ctaArrowPath = gsap.utils.toArray("#ctaArrow path") as SVGPathElement[];
	const headLength = ctaArrowPath[0].getTotalLength() + 10;
	const bodyLength = ctaArrowPath[1].getTotalLength() + 10;
	gsap.set(ctaArrowPath[0], {
		strokeDashoffset: headLength,
		strokeDasharray: headLength,
	});
	gsap.set(ctaArrowPath[1], {
		strokeDashoffset: bodyLength,
		strokeDasharray: bodyLength,
	});
	let timeline: GSAPTimeline | null = null;
	const ctaSectionTimeline = () => {
		timeline?.time(0).kill();
		timeline = gsap
			.timeline({
				scrollTrigger: {
					trigger: ctaSection,
					start: "top 70%",
					end: "top 30%",
					scrub: 1,
					// markers: true,
					invalidateOnRefresh: true,
				},
				defaults: {
					ease: "none",
				},
			})
			.to(ctaArrowPath[1], { strokeDashoffset: 0, duration: 2 })
			.to(ctaArrowPath[0], { strokeDashoffset: 0, duration: 0.5 });
	};

	ctaSectionTimeline();

	declare global {
		var ctaSectionTimeline: () => void;
	}

	window.ctaSectionTimeline = ctaSectionTimeline;

	const formSubmitText = document.getElementById(
		"formSubmitText",
	) as HTMLDivElement | null;
	const formSubmitTextSuccess = document.getElementById(
		"formSubmitTextSuccess",
	) as HTMLDivElement | null;
	const formSubmitTextWarn = document.getElementById(
		"formSubmitTextWarn",
	) as HTMLDivElement | null;
	const formSubmitTextError = document.getElementById(
		"formSubmitTextError",
	) as HTMLDivElement | null;
	const submitSuccessAnim = (showEl: HTMLElement | null) => {
		gsap.set(formSubmitText, { display: "none" });
		gsap.set(formSubmitTextSuccess, { display: "none" });
		gsap.set(formSubmitTextWarn, { display: "none" });
		gsap.set(formSubmitTextError, { display: "none" });

		gsap.fromTo(
			showEl,
			{
				display: "block",
				y: 12,
			},
			{
				y: 0,
				duration: 1,
				ease: "power3.out",
			},
		);

		setTimeout(() => {
			gsap.set(showEl, { display: "none" });
			gsap.fromTo(
				formSubmitText,
				{
					display: "block",
					y: 12,
				},
				{
					y: 0,
					duration: 1,
					ease: "power3.out",
				},
			);
		}, 3000);
	};

	let sendingMessage = false;
	const contactForm = document.getElementById(
		"contactForm",
	) as HTMLFormElement | null;
	contactForm?.addEventListener(
		"submit",
		async (e) => {
			e.preventDefault();
			if (sendingMessage) return;
			sendingMessage = true;
			const formData = new FormData(contactForm);
			const data = Object.fromEntries(formData.entries()) as {
				name: string;
				email: string;
				enquiry: string;
			};

			if (
				data.name.trim() === "" ||
				data.email.trim() === "" ||
				data.enquiry.trim() === ""
			) {
				alert("Please fill in all fields");
				return;
			}
			if (
				data.name.length > 256 ||
				data.email.length > 256 ||
				data.enquiry.length > 3000
			) {
				alert("Please enter a shorter name/email/enquiry");
				return;
			}

			try {
				const res = await fetch("/wrangler", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						email: data.email,
						name: data.name,
						enquiry: data.enquiry,
					}),
					credentials: "include",
				});

				if (res.status === 201) {
					submitSuccessAnim(formSubmitTextSuccess);
					contactForm?.reset();
				} else if (res.status === 200) {
					submitSuccessAnim(formSubmitTextWarn);
					contactForm?.reset();
				} else {
					submitSuccessAnim(formSubmitTextError);
					const json = await res.json();
					console.error(json);
				}
			} catch (e) {
				submitSuccessAnim(formSubmitTextError);
				console.error(e);
			}

			sendingMessage = false;
		},
		{
			passive: false,
		},
	);
</script>
