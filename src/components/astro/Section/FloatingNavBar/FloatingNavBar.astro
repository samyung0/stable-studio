---
import { cn } from "@/lib/utils";
import * as m from "@/paraglide/messages";

const isHK = Astro.locals.paraglide.lang === "zh-HK";
const isTW = Astro.locals.paraglide.lang === "zh-TW";
const isCN = Astro.locals.paraglide.lang === "zh-CN";
const isZH = Astro.locals.paraglide.lang === "zh";

const isChinese = isZH || isCN || isTW || isHK;
---

<nav
	class="fixed z-[100] bottom-[2%] left-[50%] hidden h-[44px] -translate-x-[50%] sm:block md:h-[54px]">
	<div
		class={cn(
			"relative flex h-full flex-col",
			isChinese && "md:[&_a]:text-sm",
		)}>
		<div class="relative z-[100] flex h-full items-center">
			<div
				class="flex h-full rounded border border-primary bg-primary text-primary-foreground">
				<a
					id="activeItem"
					class="flex text-xs items-center gap-3 whitespace-nowrap p-5"
					href="#home">{m.cozy_noble_yak_adapt()}<span>/</span></a
				>
			</div>
			<div class="relative h-full">
				<div id="navList" class="flex h-full items-center">
					<ul
						class="flex h-full flex-row items-center rounded border border-flatgray bg-background">
						<li class="pl-1 text-xs text-muted-foreground">
							<a
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#service">{m.bold_late_gecko_transform()}</a
							>
						</li>
						<li class="text-xs text-muted-foreground">
							<a
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#process">{m.kind_merry_jackal_spark()}</a
							>
						</li>
						<li class="text-xs text-muted-foreground">
							<a
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#price">{m.few_tangy_walrus_file()}</a
							>
						</li>
						<li class="pr-1 text-xs text-muted-foreground">
							<a
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#vision">{m.smart_zippy_shell_dust()}</a
							>
						</li>
					</ul>
				</div>
				<div
					id="clip-path-container"
					aria-hidden="true"
					class="pointer absolute left-0 top-0 flex h-full w-full items-center overflow-hidden rounded border border-primary bg-primary">
					<ul class="flex h-full flex-row items-center">
						<li class="pl-1 text-xs text-primary-foreground">
							<a
								aria-hidden="true"
								tabindex="-1"
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#service">{m.bold_late_gecko_transform()}</a
							>
						</li>
						<li class="text-xs text-primary-foreground">
							<a
								aria-hidden="true"
								tabindex="-1"
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#process">{m.kind_merry_jackal_spark()}</a
							>
						</li>
						<li class="text-xs text-primary-foreground">
							<a
								aria-hidden="true"
								tabindex="-1"
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#price">{m.few_tangy_walrus_file()}</a
							>
						</li>
						<li class="pr-1 text-xs text-primary-foreground">
							<a
								aria-hidden="true"
								tabindex="-1"
								class="flex items-center gap-3 whitespace-nowrap p-5"
								href="#vision">{m.smart_zippy_shell_dust()}</a
							>
						</li>
					</ul>
				</div>
			</div>
		</div>
		<div id="clip-background" class="rounded bg-flatgray opacity-50"></div>
	</div>
</nav>

<style>
	#clip-path-container {
		/* transition: clip-path 0.25s ease; */
		z-index: 100;
		clip-path: inset(0px 9999px 0px 0px round 100px);
	}
	#clip-background {
		height: 100%;
		width: 100%;
		position: absolute;
		left: 0;
		top: 0;
		z-index: 99;
	}
	#navList {
		position: relative;
		z-index: 100;
	}
</style>

<script>
	import gsap from "gsap";
	const clipPathContainer = document.getElementById("clip-path-container");
	const navItems = gsap.utils.toArray("#navList li") as HTMLElement[];
	const hrefClip = gsap.utils.toArray("#clip-path-container li>a");
	const href = hrefClip.map((anchor) =>
		(anchor as HTMLAnchorElement).href.split("#").pop(),
	);
	const navClipItems = gsap.utils.toArray(
		"#clip-path-container li",
	) as HTMLElement[];
	const setNavbar = () => {
		const activeItem = window.activeIndex ?? -1;
		if (!clipPathContainer) return;
		const containerWidth = clipPathContainer.offsetWidth;
		let borderWidth =
			parseFloat(
				getComputedStyle(clipPathContainer).borderLeftWidth.slice(0, -2),
			) +
			parseFloat(
				getComputedStyle(clipPathContainer).borderRightWidth.slice(0, -2),
			);
		const itemOffsetleft = navClipItems[activeItem]?.offsetLeft ?? 0;
		if (activeItem === -1) {
			borderWidth = 0;
		}
		const itemOffsetRight =
			itemOffsetleft + (navClipItems[activeIndex]?.offsetWidth ?? 0);
		gsap.to(clipPathContainer, {
			clipPath: `inset(0px ${containerWidth - itemOffsetRight - borderWidth}px 0px ${itemOffsetleft}px round 100px)`,
			duration: 0.25,
			ease: "power3",
		});
	};

	window.addEventListener("resize", setNavbar, { passive: true });

	declare global {
		var setNavbar: () => void;
		var href: (string | undefined)[];
		var activeIndex: number;
	}

	window.activeIndex = -1;
	window.href = href;
	window.setNavbar = setNavbar;

	navItems.forEach((navItem, index) => {
		navItem.addEventListener(
			"mouseover",
			(e) => {
				window.activeIndex = index;
				setNavbar();
			},
			{ passive: true },
		);
	});
</script>
