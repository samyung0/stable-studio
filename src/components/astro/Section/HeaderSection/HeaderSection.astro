---
import { cn } from "@/lib/utils";
import ArrowRightShort from "../../ui/ArrowRightShort.astro";
import StableStudio from "../../ui/StableStudio.astro";
import World from "../../ui/World.astro";

import * as m from "@/paraglide/messages";

const isHK = Astro.locals.paraglide.lang === "zh-HK";
const isTW = Astro.locals.paraglide.lang === "zh-TW";
const isCN = Astro.locals.paraglide.lang === "zh-CN";
const isZH = Astro.locals.paraglide.lang === "zh";
const isChinese = isHK || isTW || isCN || isZH;
---

<!-- header -->
<header id="top" class="pt-8">
	<div class="flex items-center justify-between">
		<div>
			<a href="https://stablestudio.org" class="min-h-8 flex items-center w-[160px] sm:w-56">
				<span class="sr-only">Stable Studio Homepage</span>
				<StableStudio />
			</a>
		</div>
		<div>
			<div class="hidden items-center gap-2 md:flex">
				<button
					id="languageButton"
					class="group relative overflow-hidden rounded px-4 py-4 md:px-6 md:py-5">
					<span class="relative z-10 flex items-center gap-2">
						<span
							class={cn(
								"hidden size-4 -translate-y-[1px] lg:inline",
								isChinese && "translate-y-0",
							)}><World /></span
						>
						<span>{m.zippy_careful_rooster_clasp()}</span>
					</span>

					<span
						class="absolute left-0 top-0 size-full overflow-hidden rounded-md"
						><span
							class="absolute left-0 aspect-square w-full origin-center -translate-x-full rounded-full bg-flatlightblue transition-all duration-500 group-hover:-translate-x-0 group-hover:scale-150"
						></span></span
					>
				</button>
				<a
					href="#getstarted"
					data-umami-event="Get Started Top"
					id="getStartedButton"
					class="group relative rounded bg-primary px-4 py-4 text-primary-foreground md:gap-3 md:px-6 md:py-5">
					<span
						class="relative z-10 flex items-center gap-1 duration-500 group-hover:text-primary">
						<span class="size-4 text-muted-foreground md:size-6">
							<ArrowRightShort />
						</span>
						<span class={cn("mt-[2px] block", isChinese && "mt-0")}
							>{m.fresh_nimble_tortoise_soar()}</span
						>
					</span>

					<span class="absolute left-0 top-0 size-full overflow-hidden rounded"
						><span
							class="absolute left-0 aspect-square w-full origin-center -translate-x-full rounded-full bg-flatviolet2 transition-all duration-500 group-hover:-translate-x-0 group-hover:scale-150"
						></span></span
					>
				</a>
			</div>
		</div>
	</div>
</header>

<style is:global>
	/* @property compatibility hack, see https://codepen.io/propjockey/pen/OJdJmya */
	/* for some reasons does not work when opening through another device, even though on the same network, it has to be in localhost */
	@supports (background: paint(xddd)) or
		((width: 1rlh) and ((-webkit-hyphens: none) or (-moz-appearance: none))) {
		@property --radialFixLeft {
			syntax: "<color>";
			initial-value: rgb(38, 38, 38);
			inherits: false;
		}
		@property --radialFixRight {
			syntax: "<color>";
			initial-value: rgb(38, 38, 38);
			inherits: false;
		}

		#getStartedButton {
			background-image: radial-gradient(
					circle at 0% 50%,
					transparent calc(100% - 30px),
					var(--radialFixRight) 30px
				),
				radial-gradient(
					circle at 100% 50%,
					transparent calc(100% - 30px),
					var(--radialFixLeft) 30px
				);
			transition:
				--radialFixLeft 0s linear 0.2s,
				--radialFixRight 0s linear 0.1s;
		}
		#getStartedButton:hover {
			transition:
				--radialFixLeft 0s linear 0.15s,
				--radialFixRight 0s linear 0.35s;
			--radialFixLeft: #dad6e3;
			--radialFixRight: #dad6e3;
		}
	}
</style>

<script>
	import gsap from "gsap";
	const languageButton = document.getElementById("languageButton");
	const sidenav = document.getElementById("sidenav");
	const sidenavScroll = document.getElementById("sidenavScroll");
	const smallNavButton = document.getElementById("smallNavButton");
	const sidenavAnimateOpen = gsap.utils.toArray(
		".sidenavAnimateOpen",
	) as SVGAnimateElement[];
	const sidenavAnimateClose = gsap.utils.toArray(
		".sidenavAnimateClose",
	) as SVGAnimateElement[];

	const openSidenav = () => {
		window.lenis?.stop();
		console.log(window.lenis)
		window.sidenavOpen = true;
		sidenavAnimateOpen.forEach((el) => el.beginElement());
		gsap.set(sidenav, { display: "flex" });
		gsap.to(sidenav, {
			duration: 0.35,
			backdropFilter: "blur(12px)",
			ease: "power3.out",
			overwrite: "auto",
		});
		gsap.set(sidenavScroll, { opacity: 1 });
		gsap.to(sidenavScroll, {
			x: 0,
			duration: 0.5,
			overwrite: "auto",
			ease: "power3.out",
		});
	};

	const closeSidenav = () => {
		window.lenis?.start();
		window.sidenavOpen = false;
		sidenavAnimateClose.forEach((animate) => animate.beginElement());
		gsap.to(sidenav, {
			backdropFilter: "blur(0px)",
			ease: "power3.out",
			overwrite: "auto",
		});
		gsap.to(sidenavScroll, {
			duration: 0.5,
			x: () => sidenavScroll!.offsetWidth,
			ease: "power3.out",
			overwrite: "auto",
		});
		gsap.to(sidenavScroll, {
			duration: 0.4,
			delay: 0.05,
			opacity: 0,
			ease: "power3.out",
			overwrite: "auto",
			onComplete: () => {
				gsap.set(sidenav, { display: "none" });
			},
		});
	};

	declare global {
		var closeSidenav: () => void;
		var openSidenav: () => void;
		var sidenavOpen: boolean;
	}

	window.closeSidenav = closeSidenav;
	window.openSidenav = openSidenav;
	window.sidenavOpen = false;

	const handleNav = () => {
		if (window.sidenavOpen) {
			closeSidenav();
		} else {
			openSidenav();
		}
	};

	languageButton?.addEventListener("click", handleNav, { passive: true });
	smallNavButton?.addEventListener("click", handleNav, { passive: true });
</script>
