---
import { cn } from "@/lib/utils";
import AnimatedDivider from "../../AnimatedDivider/AnimatedDivider.astro";
import AnimatedText from "../../AnimatedText/AnimatedText.astro";
import ArrowRightDown from "../../ui/ArrowRightDown.astro";
import Sus from "@/components/astro/ui/Sus.astro";
// import DoubleGear from "../../ui/DoubleGear.astro";
// import LandingImg from "../../ui/LandingImg.astro";

import * as m from "@/paraglide/messages";
import GeometrySquare from "../../ui/GeometrySquare.astro";

const isBahasa = Astro.locals.paraglide.lang === "id";
const isTagalog = Astro.locals.paraglide.lang === "tl";

const isSmall = isBahasa || isTagalog;
---

<!-- landing section -->
<section
	class={cn("pt-24 md:pt-48", isSmall && "sm:pt-48")}
	aria-details="landingSectionDetails">
	<div
		id="schemaMarkupMain"
		class={cn(
			"flex flex-col items-stretch justify-between gap-[60px] [grid-row-gap:25px]",
			!isSmall && "lg:flex-row",
			isSmall && "xl:flex-row",
		)}>
		<h1
			class={cn(
				"flex-[2] text-4xl leading-[1.2] sm:text-[9vw] lg:text-[6vw] 3xl:text-[130px]",
				isSmall &&
					"text-2xl sm:text-[6vw] xl:text-[4vw] 2xl:text-[4.2vw] 3xl:text-[100px] leading-[1.4] tracking-tight",
			)}>
			<span class={cn("sm:whitespace-nowrap", isSmall && "relative")}
				>{m.tasty_wide_toad_renew()}
				<span
					class={cn(
						"inline-block aspect-square w-[36px] translate-y-2 sm:w-[9vw] lg:w-[6vw] 3xl:w-[130px]",
						isSmall && "hidden",
					)}>
					<GeometrySquare />
				</span>
			</span><br /><span class="sm:whitespace-nowrap"
				>{m.pretty_sweet_butterfly_dart()}</span
			>
		</h1>
		<div
			class="flex min-w-[300px] flex-1 shrink-0 flex-col items-start py-4 sm:max-w-[60vw] xl:max-w-[700px]">
			<div
				class="pb-8 uppercase leading-[1.7] opacity-80"
				id="landingSectionDetails">
				<AnimatedText>Stable Studio</AnimatedText>
				{m.active_calm_felix_sway()}
			</div>

			<a class="flex items-center gap-1" href="#process">
				<span class="-mt-1 block size-3 stroke-2 text-black">
					<ArrowRightDown />
				</span>
				<span
					class="group text-xs sm:text-sm relative inline-flex items-center justify-center overflow-hidden">
					<span
						class="translate-y-0 transition duration-300 group-hover:translate-y-[100%]">
						{m.every_late_squid_revive()}
					</span>
					<span
						class="absolute -translate-y-[100%] transition duration-300 group-hover:translate-y-0">
						{m.every_late_squid_revive()}
					</span>
				</span>
			</a>
		</div>
	</div>
</section>

<!-- animated divider -->
<section class="~pt-6/20">
	<div
		id="animatedDivider"
		class="flex flex-nowrap items-center gap-1 overflow-hidden uppercase">
		<AnimatedDivider />
		<AnimatedDivider />
		<span></span>
		<AnimatedDivider />
		<span></span>
		<AnimatedDivider />
		<span></span>
	</div>
</section>

<!-- landing image -->
<section class="flex w-full flex-col gap-1 ~pt-3/10">
	<button
		id="loadAnimationBtn"
		class="hidden text-[0.65rem] font-normal uppercase text-muted-foreground underline"
		>Load Animation (beware of lag)</button
	>
	<div id="notSusAnimation" class="hidden">
		<img alt="static landing image" class="rounded-xl object-contain" />
		<!-- <LandingImg /> -->
	</div>
	<div id="susAnimation" class="flex">
		<Sus />
	</div>
</section>

<style>
	#loadAnimationBtn.no-smil {
		display: block;
	}
	#susAnimation.no-smil {
		display: none;
	}
</style>

<script>
	// import sus from "@/assets/sus.json"
	const btn = document.getElementById("loadAnimationBtn")!;
	const susAnimation = document.getElementById(
		"susAnimation",
	) as HTMLElement | null;
	const notSusAnimation = document.getElementById(
		"notSusAnimation",
	) as HTMLElement | null;

	declare global {
		var Modernizr: any;
	}

	if (!Modernizr.smil) {
		susAnimation!.style.display = "none";
		notSusAnimation!.style.display = "flex";
		notSusAnimation!.firstElementChild!.setAttribute("src", "/landing.svg");
		susAnimation!.innerHTML = "";

		const load = async () => {
			btn.removeEventListener("click", load);
			btn.remove();
			btn.style.display = "none";
			susAnimation!.style.display = "flex";
			susAnimation!.style.height = `${
				parseFloat(getComputedStyle(notSusAnimation!).width.slice(0, -2)) /
				1.692966872
			}px`;

			const lottie = (await import("lottie-web")).default;
			lottie.setQuality(2);
			const anim = lottie.loadAnimation({
				container: susAnimation!,
				renderer: "canvas",
				loop: true,
				autoplay: true,
				// animationData: sus,
				path: "/sus.json",
				rendererSettings: {
					// preserveAspectRatio: "xMidYMid slice",
					// focusable: false,
					clearCanvas: false,
				},
			});

			anim.addEventListener("DOMLoaded", () => {
				console.log("lottie loaded");
				notSusAnimation!.style.display = "none";
				notSusAnimation?.remove();
			});
		};

		btn.addEventListener("click", load, { passive: true });
	}
</script>
