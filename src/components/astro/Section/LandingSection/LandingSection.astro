---
import { cn } from "@/lib/utils";
import AnimatedDivider from "../../AnimatedDivider/AnimatedDivider.astro";
import AnimatedText from "../../AnimatedText/AnimatedText.astro";
import ArrowRightDown from "../../ui/ArrowRightDown.astro";
import Sus from "@/components/astro/ui/Sus.astro";
// import DoubleGear from "../../ui/DoubleGear.astro";
// import LandingImg from "../../ui/LandingImg.astro";

import * as m from "@/paraglide/messages";
import GeometrySquare from "../../ui/GeometrySquare.astro";

const isBahasa = Astro.locals.paraglide.lang === "id";
const isTagalog = Astro.locals.paraglide.lang === "tl";
const isHK = Astro.locals.paraglide.lang === "zh-HK";
const isTW = Astro.locals.paraglide.lang === "zh-TW";
const isCN = Astro.locals.paraglide.lang === "zh-CN";
const isZH = Astro.locals.paraglide.lang === "zh";

const isSmall = isBahasa || isTagalog || isHK || isTW || isZH || isCN;
const isChinese = isZH || isCN || isTW || isHK;
---

<!-- landing section -->
<section
	class={cn("pt-24 md:pt-48", isSmall && "sm:pt-48")}
	aria-details="landingSectionDetails">
	<div
		id="schemaMarkupMain"
		class={cn(
			"flex flex-col items-stretch justify-between gap-[60px] [grid-row-gap:25px]",
			!isSmall && "lg:flex-row",
			isSmall && "xl:flex-row",
		)}>
		<h1
			class={cn(
				"flex-[2] text-4xl leading-[1.1] sm:text-[9vw] lg:text-[6vw] 3xl:text-[130px]",
				isSmall &&
					"text-2xl sm:text-[6vw] xl:text-[4vw] 2xl:text-[4.2vw] 3xl:text-[100px] leading-[1.4] tracking-tight",
				isChinese && "text-3xl leading-[1.4]",
			)}>
			<span class={cn("sm:whitespace-nowrap", isSmall && "relative")}
				>{m.tasty_wide_toad_renew()}
				<span
					class={cn(
						"inline-block aspect-square w-[36px] translate-y-2 sm:w-[9vw] lg:w-[6vw] 3xl:w-[130px]",
						(isBahasa || isTagalog || isTW || isCN) && "hidden",
						isChinese && "translate-x-2",
					)}>
					<GeometrySquare />
				</span>
			</span><br /><span class="sm:whitespace-nowrap"
				>{m.pretty_sweet_butterfly_dart()}</span
			>
		</h1>
		<div
			class="flex min-w-[300px] flex-1 shrink-0 flex-col items-start py-4 sm:max-w-[60vw] xl:max-w-[700px]">
			<div
				class={cn(
					"pb-8 uppercase leading-[1.7] opacity-80",
					(!isSmall || isChinese) && "xl:translate-y-[2vh]",
				)}
				id="landingSectionDetails">
				<AnimatedText>Stable Studio</AnimatedText>
				{m.active_calm_felix_sway()}
			</div>

			<a class="flex items-center gap-1" href="#process">
				<span
					class={cn(
						"-mt-1 block size-3 stroke-2 text-black",
						isChinese && "mt-0",
					)}>
					<ArrowRightDown />
				</span>
				<span
					class="group relative inline-flex items-center justify-center overflow-hidden text-xs sm:text-sm">
					<span
						class="translate-y-0 transition duration-300 group-hover:translate-y-[100%]">
						{m.every_late_squid_revive()}
					</span>
					<span
						class="absolute -translate-y-[100%] transition duration-300 group-hover:translate-y-0">
						{m.every_late_squid_revive()}
					</span>
				</span>
			</a>
		</div>
	</div>
</section>

<!-- animated divider -->
<section class="~pt-6/20">
	<div
		id="animatedDivider"
		class="flex flex-nowrap items-center gap-1 overflow-hidden uppercase">
		<AnimatedDivider />
		<AnimatedDivider />
		<span></span>
		<AnimatedDivider />
		<span></span>
		<AnimatedDivider />
		<span></span>
	</div>
</section>

<!-- landing image -->
<section class="flex w-full flex-col gap-1 ~pt-3/10">
	<button
		id="loadAnimationBtn"
		class="hidden text-[0.65rem] font-normal uppercase text-muted-foreground underline"
		>Load Animation (beware of lag)</button
	>
	<button
		id="resumeAnimationBtn"
		class="hidden text-[0.65rem] font-normal uppercase text-muted-foreground underline"
		>Resume Animation (beware of lag)</button
	>
	<div id="notSusAnimation" class="hidden">
		<img alt="static landing image" class="rounded-xl object-contain" />
		<!-- <LandingImg /> -->
	</div>
	<div id="susAnimation" class="flex">
		<Sus />
	</div>
</section>

<style>
	#loadAnimationBtn.no-smil {
		display: block;
	}
	#susAnimation.no-smil {
		display: none;
	}
</style>

<script>
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	const btn = document.getElementById("loadAnimationBtn")!;
	const resumeBtn = document.getElementById("resumeAnimationBtn")!;
	const susAnimation = document.getElementById(
		"susAnimation",
	) as HTMLElement | null;
	const notSusAnimation = document.getElementById(
		"notSusAnimation",
	) as HTMLElement | null;

	const landingAnimate = gsap.utils.toArray(".landingAnimate") as (
		| SVGAnimateElement
		| SVGAnimateMotionElement
	)[];

	const pauseAnim = () => {
		for (let i = 0; i < landingAnimate.length; i++) {
			landingAnimate[i].endElement();
		}
	};

	const resumeAnim = () => {
		for (let i = 0; i < landingAnimate.length; i++) {
			landingAnimate[i].beginElement();
		}
	};

	ScrollTrigger.create({
		trigger: susAnimation,
		start: "bottom top",
		onEnter: pauseAnim,
		onLeaveBack: resumeAnim,
	});

	let hasPaused = false;
	let hasStarted = false;
	let hasResumed = false;
	landingAnimate[0].addEventListener("beginEvent", () => {
		hasStarted = true;
		if (hasPaused && !hasResumed) pauseAnim();
	});

	const observer = new PerformanceObserver(function (list) {
		for (const entry of list.getEntries()) {
			if (entry.duration > 350 && !hasPaused) {
				if(hasResumed) return;
				console.log(entry);
				hasPaused = true;
				resumeBtn.style.display = "block";
				if (hasStarted) pauseAnim();

				resumeBtn.addEventListener(
					"click",
					() => {
						hasPaused = false;
						hasResumed = true;
						resumeBtn.style.display = "none";
						resumeAnim();
						observer.disconnect();
					},
					{ passive: true },
				);
			}
		}
	});

	observer.observe({ type: "longtask" });

	declare global {
		var Modernizr: any;
	}

	// if (!Modernizr.smil) {
	// 	susAnimation!.style.display = "none";
	// 	notSusAnimation!.style.display = "flex";
	// 	notSusAnimation!.firstElementChild!.setAttribute("src", "/landing.svg");
	// 	susAnimation!.innerHTML = "";

	// 	const load = async () => {
	// 		btn.removeEventListener("click", load);
	// 		btn.remove();
	// 		btn.style.display = "none";
	// 		susAnimation!.style.display = "flex";
	// 		susAnimation!.style.height = `${
	// 			parseFloat(getComputedStyle(notSusAnimation!).width.slice(0, -2)) /
	// 			1.692966872
	// 		}px`;

	// 		const lottie = (await import("lottie-web")).default;
	// 		lottie.setQuality(2);
	// 		const anim = lottie.loadAnimation({
	// 			container: susAnimation!,
	// 			renderer: "canvas",
	// 			loop: true,
	// 			autoplay: true,
	// 			// animationData: sus,
	// 			path: "/sus.json",
	// 			rendererSettings: {
	// 				// preserveAspectRatio: "xMidYMid slice",
	// 				// focusable: false,
	// 				clearCanvas: false,
	// 			},
	// 		});

	// 		anim.addEventListener("DOMLoaded", () => {
	// 			console.log("lottie loaded");
	// 			notSusAnimation!.style.display = "none";
	// 			notSusAnimation?.remove();
	// 		});

	// 		ScrollTrigger.create({
	// 			trigger: notSusAnimation,
	// 			start: "bottom top",
	// 			onEnter: () => {
	// 				anim.pause();
	// 			},
	// 			onLeaveBack: () => {
	// 				anim.play();
	// 			},
	// 		});
	// 	};

	// 	btn.addEventListener("click", load, { passive: true });
	// }
</script>
